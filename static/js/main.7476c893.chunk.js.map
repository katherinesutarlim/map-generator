{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","row","col","active","Position","Pixel","props","style","width","height","border","boxSizing","backgroundColor","onClick","click","onMouseEnter","mouseEnter","onMouseDown","mouseDown","onMouseUp","mouseUp","Grid","grid","i","j","push","state","activeCells","updateCell","bind","dilateSquare","dilateDiamond","clear","this","setState","concat","filter","cell","newActiveCells","top","bottom","left","right","dilation","map","item","Math","random","list","display","flexWrap","justifyContent","marginTop","marginRight","color","fontSize","fontWeight","borderRadius","marginLeft","dilate","Component","App","flexDirection","alignItems","marginBottom","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7476c893.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Cell {\n  active: boolean = false;\n  constructor(public row: number, public col: number) {}\n}\n\nclass Position {\n  constructor(public row: number, public col: number) {}\n}\n\ninterface PixelState {\n  active: boolean,\n  mouseEnter: Function,\n  mouseDown: Function,\n  mouseUp: Function,\n  click: Function\n}\n\nconst Pixel: React.FC<PixelState> = (props) => {\n  if (props.active) {\n    return(\n      <div\n        style={{\n          width:10,\n          height: 10,\n          border: \"0.5px solid #EFEFEF\",\n          boxSizing: \"border-box\",\n          backgroundColor: 'red'\n        }}\n        onClick={() => props.click()}\n        onMouseEnter={() => props.mouseEnter()}\n        onMouseDown={() => props.mouseDown()}\n        onMouseUp={() => props.mouseUp()}\n      />\n    );\n  }\n  return(\n    <div\n      style={{\n        width:10,\n        height: 10,\n        border: \"0.5px solid #EFEFEF\",\n        boxSizing: \"border-box\",\n      }}\n      onMouseEnter={() => props.mouseEnter()}\n      onMouseDown={() => props.mouseDown()}\n      onMouseUp={() => props.mouseUp()}\n      onClick={() => props.click()}\n    />\n  );\n}\n\nclass Grid extends Component<{}, {activeCells: Position[], mouseDown: boolean}> {\n  grid: Cell[][] = []\n\n  constructor(props: {}) {\n    super(props);\n\n    for (let i = 0; i < 48; i++) {\n      let row: Cell[] = [];\n      for (let j = 0; j < 96; j++) {\n        row.push(new Cell(i,j));\n      }\n      this.grid.push(row);\n    }\n\n    this.state = {\n      activeCells: [],\n      mouseDown: false,\n    };\n\n    this.updateCell = this.updateCell.bind(this);\n    this.dilateSquare = this.dilateSquare.bind(this);\n    this.dilateDiamond = this.dilateDiamond.bind(this);\n    this.clear = this.clear.bind(this);\n  }\n\n  updateCell(row: number, col: number) {\n    this.grid[row][col].active = !this.grid[row][col].active;\n    this.setState(state => {\n      if (this.grid[row][col].active) {\n        const list = state.activeCells.concat([new Position(row, col)]);\n        return {\n          activeCells: list,\n        };\n      }\n      const list = state.activeCells.filter((cell, i) => cell.row !== row || cell.col !== col);\n      return {\n        activeCells: list,\n      };\n    });\n  }\n\n  dilateSquare(cell: Position) {\n    let newActiveCells: Position[] = [];\n    const top = (cell.row - 1 >= 0) ? (cell.row - 1) : 0;\n    const bottom = (cell.row + 1 < 48) ? (cell.row + 1) : 47;\n    const left = (cell.col - 1 >= 0) ? (cell.col - 1) : 0;\n    const right = (cell.col + 1 < 96) ? (cell.col + 1) : 95;\n    for (let i = top; i <= bottom; i++) {\n      for (let j = left; j <= right; j++) {\n        if (!this.grid[i][j].active) {\n          this.grid[i][j].active = true;\n          newActiveCells.push(new Position(i, j));\n        }\n      }\n    }\n    return newActiveCells;\n  }\n\n  dilateDiamond(cell: Position) {\n    let newActiveCells: Position[] = [];\n    const top = (cell.row - 1 >= 0) ? (cell.row - 1) : 0;\n    const bottom = (cell.row + 1 < 48) ? (cell.row + 1) : 47;\n    const left = (cell.col - 1 >= 0) ? (cell.col - 1) : 0;\n    const right = (cell.col + 1 < 96) ? (cell.col + 1) : 95;\n    let dilation: Position[] = [];\n    dilation.push(new Position(top, cell.col));\n    dilation.push(new Position(bottom, cell.col));\n    dilation.push(new Position(cell.row, left));\n    dilation.push(new Position(cell.row, right));\n    dilation.map((item, i) => {\n      if (!this.grid[item.row][item.col].active) {\n        this.grid[item.row][item.col].active = true;\n        newActiveCells.push(new Position(item.row, item.col));\n      }\n    });\n    return newActiveCells;\n  }\n\n  dilate() {\n    let newActiveCells: Position[] = [];\n    this.state.activeCells.map((cell) => {\n      let dilation: Position[] = [];\n      if (Math.random() < 0.1) {\n        dilation = this.dilateSquare(cell);\n      } else if (Math.random() < 0.3) {\n        dilation = this.dilateDiamond(cell);\n      }\n      const list = newActiveCells.concat(dilation);\n      newActiveCells = list;\n    });\n    this.setState(state => {\n      const list = state.activeCells.concat(newActiveCells);\n      return {\n        activeCells: list,\n      }\n    });\n  }\n\n  clear() {\n    this.state.activeCells.map((cell, i, list) => {\n      this.grid[cell.row][cell.col].active = false;\n    });\n    this.setState({\n      activeCells: [],\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{\n          width: 960,\n          height: 480,\n          display: 'flex',\n          flexWrap: 'wrap'\n        }}>\n          {this.grid.map((row) => (\n            row.map((cell) => (\n              <Pixel\n                active={cell.active}\n                mouseEnter={() => {if (this.state.mouseDown) this.updateCell(cell.row, cell.col)}}\n                mouseDown={() => {this.setState({mouseDown: true,})}}\n                mouseUp={() => {this.setState({mouseDown: false})}}\n                click={() => {this.updateCell(cell.row, cell.col)}}\n              />)\n            )\n          ))}\n        </div>\n        <div style={{\n          width: 960,\n          display: 'flex',\n          justifyContent: 'center',\n          marginTop: 20,\n        }}>\n          <button style={{\n            width: 110,\n            height: 50,\n            border: 0,\n            marginRight: 10,\n            backgroundColor: '#22a6b3',\n            color: 'white',\n            fontSize: 18,\n            fontWeight: 'bold',\n            borderRadius: 8,\n          }} onClick={() => this.clear()}> Clear </button>\n          <button style={{\n              width: 110,\n              height: 50,\n              border: 0,\n              marginLeft: 10,\n              backgroundColor: '#f0932b',\n              color: 'white',\n              fontSize: 18,\n              fontWeight: 'bold',\n              borderRadius: 8,\n            }} onClick={() => this.dilate()}> Dilate </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst App: React.FC = () => {\n  return (\n    <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      flexWrap: 'wrap'\n    }}>\n      <div style={{\n        width:960,\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column'\n      }}>\n        <h1 style={{marginBottom: 5, color: '#f0932b'}}>The Map Generator!</h1>\n        <h3 style={{marginTop: 5, marginBottom: 0, color: '#22a6b3'}}>aka the Random Dilator</h3>\n        <p style={{marginBottom: 5, textAlign: 'center'}}>\n          Draw on the grid by clicking on a cell one by one or use it like a brush (hold and move your cursor around).\n          Just draw something random, then press dilate. If you're lucky, you'll end up having something that could look like a world map of some kind! :P\n        </p>\n        <p style={{marginBottom: 30, textAlign: 'center', fontSize: 12}}>Tip: Clicking on an red cell will turn it white :)</p>\n      </div>\n      <Grid/>\n      <div>\n        <p style={{marginTop: 35, marginBottom:30, textAlign: 'center'}}>Made by Katherine Sutarlim</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}